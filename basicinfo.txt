trees:-
root:-topmost node 
Parent:- node which connects to the child  
child:- node which is connected by another node is its child 
leaf/external nodes:- nodes with no children 
internal node:- nodes with atleast one child 
depth:-no of edges from top(root) to that node
height:- no of edges from node to the deepest leaf  
siblings:- nodes belonging to the same parent 
degree:- no nodes its connected to niche

binary:-
at most 2 children for all the nodes 
n nodes:- n-1 edges 
degree of tree is the highest degree of a node in the tree 
binary tree degree <=2

types:-
fullor strict tree:- 0 or 2 children of each node 
perfect tree:-exactly 2 children and all leaf  nodes are on same level 
complete binary tree:- if all levels are completely filled except possibly the last level + last level must have all keys left aligned 
degenerate tree:- every parent node has exactly one child 2 types:-1 left skewed all child left and 2 right skewed all child right 

trees can represented using array and linked list but linked list is better as in array lot of changesis to be made for every transition 

traversal:-
preorder:-root->left subtree->right subtree
postorder:- left subtree->right subtree->root
inorder:- left subtree->root->right subtree 

binary search tree:-
all the nodes of the left subtree are smaller 
all the nodes of the right subtree are greater 
left and right subtree are also bst and no duplicate node
in order raversal of a bst is the ascending order 

deletion in a bst is of 3 types:-
1;- the node is a leaf node 
2:- the node is a non leaf node 
3:- the node is the root node 
left majaka right most udao is the logicof the inorderpre 